#!/bin/busybox sh

# Source & license at https://github.com/macmpi/berryboot-scripts
# Feel free to report any issue or comment there.


### This file resides in Volumio read-only squashfs image
# This script does Volumio backoffice supervisor stuff, similarly to Volumio original init
# It is run by berryboot init BEFORE aufs overlay filesystem is composed
#
# Note: it is run under Berryboot busybox, with root privileges
# this script is inlined into berryboot init, so be careful about variables, cd, ...
#
# we can use (but shall not modify) the following variables:
#
# IMAGE=`cat /tmp/answer`
# DATADIR="/mnt/data/$IMAGE"
# SHAREDDIR="/mnt/shared"
# IMAGEPATH="/mnt/images/$IMAGE"
# GOVERNOR

ENTRYPATH=$(pwd)     # we are now safe to eventually change directory


############## Self-patch init sequence and relaunch from next banner ##################
# Required until https://github.com/maxnet/berryboot/pull/437 is resolved
# berryboot-init is inlined into /init, but the file resides in /squashfs.
# Therefore, while running, it prevents un-mounting squashfs image and then update image.
# So the trick here is to relaunch this script (and following part of init) from another
# location, hence exiting/freeing this original file...  (circumvoluted?  humm... yes! :p)

echo ""
echo "Prepping script relocation..."

# we construct relocated all-in-one init script
echo "#!/bin/busybox sh" > /reloc-init
# we keep this script from next banner to execute beyond that point
sed -n -e '/^#* We start from here !! #*/,$p' /squashfs/berryboot-init >> /reloc-init
# we append the remaining part of inird
sed -n -e '/^.*# Fedora and Arch symlink.*/,$p' /init >> /reloc-init
chmod 770 /reloc-init

# we need to make sure our new /reloc-init can access insofar variables we (and init) need
export IMAGE
export DATADIR
export SHAREDDIR
export IMAGEPATH
export GOVERNOR
export ENTRYPATH

echo "Now we will continue from another location... see you soon !!"
exec /reloc-init   # exec ensures we keep PID 1, which is required for switch_root

# now we are gone in hyperspace !!!


###################### We start from here !! ###########################

BBINITVERSION="1.2"

BBINITURL="https://bit.ly/BBInitVolumio2"    


echo "
######################################################
########### Volumio2 Berryboot Integration ###########
###########    version  ${BBINITVERSION}   by macmpi    ###########
"


################ generic log utiliy function ###################
# Display a message and aggregate it for volumio2 journalctl
LOGFILE="/data/V2log.txt"   # Volumio2 OS will consume it

print_msg() {
  echo "$1" | tee -a /mnt"${LOGFILE}"
}


########### detect Partitions devices  ######################

# boot partition may not be set by berryboot install in cmdline.txt: that is dangerous!
BOOT_PART=""
CMDLINE=$(cat /proc/cmdline)

for p in ${CMDLINE};
do
  key=${p%%=*}
  value=${p#*=}
  
  case $key in
  bootdev)
    BOOT_PART=$value    # does not include /dev name part
    ;;
  esac
done

# sanity-check
if [ -z "${BOOT_PART}" ]; then
  echo "
WARNING !!!  Please check & edit bootdev= statement in cmdline.txt on your
Berryboot boot partiton. cmdline.txt MUST have a proper bootdev definition
statement:   bootdev=mmcblk0p1 or =sda1 or other relevant boot partition
Device will now halt in few seconds"
  sync
  umount /mnt
  sleep 10
  halt -f
else
  BOOT_PART="/dev/${BOOT_PART}"
fi


# Berryboot data partiton (always exists at this point) may not be directly the one specified in
# cmdline.txt by datadev= , namely in case of complex mounts such as encrypted partitions or iSCSI
# so we look at which device corresponds to /mnt currently, as berryboot has completed it's own mounting work here
# in case of encrypted partitions, fstab mount requires mount by UUID, so we always use it
DATA_PART=$(df | egrep "/mnt" | awk '{print $1}')

print_msg "Partitions found:  boot: ${BOOT_PART}   berryboot data: ${DATA_PART}"

########### Sanity-checks finished #######



#############################################################
############## Volumio Reset & Updates functions ############
#############################################################
BOOTMOUNT="/boottemp"    # temp /boot mount
mkdir -p "${BOOTMOUNT}"
mount -t vfat -w "${BOOT_PART}" "${BOOTMOUNT}"


################# Reset data section ##############################
# Now we deal with eventual factory reset & al
# currently we do not do factory image save/reload; we just keep previous image
# so factory and user data reset are same
# Note: this has to be very-first as it wipes overlay: NO DATADIR setup stuff before this!
# Follow-up sections should do all initial overlay setup

# if there is factory or user reset files then format data partition
if [ -e "${BOOTMOUNT}"/factory_reset ] || [ -e "${BOOTMOUNT}"/user_data ]; then
  rm "${BOOTMOUNT}"/factory_reset "${BOOTMOUNT}"/user_data > /dev/null 2>&1
  rm -rf "${DATADIR}"
  print_msg "Factory reset successfully executed"
fi


################# Volumio Updates section ##########################
# Now we setup things so that Volumio2 built-in differential updates work.
# We check if such update has been done previously, in order to replace image.
# Note: after update we relaunch new-image script with it's own script do new own setup
# so we stay away from any significant changes before doing update (do that first after reset)

BBMOUNT="/berryboot"

# setting-up /imgpart directory (within overlay) that receives OS updates from Volumio app.
UPDTDIR="${DATADIR}/imgpart"
if [ ! -d "${UPDTDIR}" ]; then
  mkdir -p "${UPDTDIR}"
  chmod 777 "${UPDTDIR}"
fi


# discard eventual kernel updates as Berryboot runs its own kernel
if [ -e "${BOOTMOUNT}"/kernel_update ]; then
    rm "${BOOTMOUNT}"/kernel_update
fi


# Manage Volumio squash image updates
if [ ! -h "${UPDTDIR}"/volumio_current.sqsh ]; then
  if [ -f "${UPDTDIR}"/volumio_current.sqsh ]; then
  
    # if the update failed before completion
    if [ -e "${BOOTMOUNT}"/update_process ]; then
      print_msg "Image update attempt failed, keeping current image"
      rm "${BOOTMOUNT}"/update_process
    else
      print_msg "Installing updated image"
      cd "${UPDTDIR}"
      # we try to get latest patches from network or fallback with existing ones
      if ! wget -O berryboot-init "${BBINITURL}" > /dev/null 2>&1; then
        cp /squashfs/berryboot-init .
      fi
      chmod ug+x berryboot-init   # needed because we will relaunch with exec command, not inline
      print_msg "Patching updated image"
      if mksquashfs ./berryboot-init volumio_current.sqsh > /dev/null 2>&1; then
        print_msg "Unmounting previous image and replacing with new"
        umount -f /squashfs  # we are now running from /reloc-init so we should be safe to keep running!...
        mv -f volumio_current.sqsh "${IMAGEPATH}"
        rm -rf "${UPDTDIR:?}"/*
        umount "${BOOTMOUNT}"
        rmdir "${BOOTMOUNT}"
        sync
        clear
        print_msg "Mounting Updated image ${IMAGE}"
        mount -o loop,ro "${IMAGEPATH}" /squashfs
        cd "${ENTRYPATH}"
        print_msg "Relaunching with updated image & init..."
        exec /squashfs/berryboot-init   # exec ensures we keep PID 1
      else
        print_msg "Patching new image failed, keeping current image"
      fi
    fi    
    rm -rf "${UPDTDIR:?}"/*
  fi

  # We link Volumio image into /imgpart to (re)enable zsync differential updates again
  ln -s "${BBMOUNT}"/images/"${IMAGE}" "${UPDTDIR}"/volumio_current.sqsh    # ${BBMOUNT} to be mounted at Volumio startup
  print_msg "Ready to accept eventual Volumio2 updates to come..."
fi

umount "${BOOTMOUNT}"
rmdir "${BOOTMOUNT}"


##################################################################
############    General config for Volumio2 OS boot   ############
##################################################################


############ Manage OS mounts ########
# Remove eventual /boot mount from original fstab
# do it at each squashfs mount, as partiton layout may have changed (image update, cloned setup from another media)
# we do not add /berryboot mounts here because it will fail in case of encrypted Partitions
# will mount within berryboot-integ service

print_msg "Patching Volumio /etc/fstab to remove original /boot"
mkdir -p "${DATADIR}"/etc
sed '/^\/dev\/.*\/boot.*vfat.*/d' /squashfs/etc/fstab > "${DATADIR}"/etc/fstab


################ berryboot-integ script & systemd service ###################################
# setup berryboot-integ script and related systemd service to launch berryboot-integ at Volumio OS startup
# This allows to mount partitions and issue pre-boot berryboot-phase log into system journal
# We also use it to schedule swap during OS boot as this shall not happen before berryboot partition is mounted
mkdir -p "${DATADIR}"/lib/systemd/system
mkdir -p "${DATADIR}"/etc/systemd/system/multi-user.target.wants

print_msg "Creating Berryboot integration systemd service for Volumio OS"

echo "[Unit]
Description = Berryboot integration service
DefaultDependencies=false

After=network.target
Before=sysinit.target
Before=dynamicswap.service

[Service]
Type=simple
StandardOutput=syslog
StandardError=syslog
SyslogIdentifier=berryboot-integ
User=root
Group=root
ExecStartPre=/bin/mkdir -p ${BBMOUNT}
ExecStartPre=/bin/mount -o defaults ${DATA_PART} ${BBMOUNT}
ExecStartPre=/bin/mount -t vfat -o defaults,utf8,user,rw,umask=111,dmask=000 ${BOOT_PART} /boot
ExecStart=/bin/sh /.berryboot-integ

[Install]
WantedBy=multi-user.target" > "${DATADIR}"/lib/systemd/system/berryboot-integ.service

# Enable Systemd service
ln -s /lib/systemd/system/berryboot-integ.service "${DATADIR}"/etc/systemd/system/multi-user.target.wants/berryboot-integ.service > /dev/null 2>&1


# berryboot-integ script is always restored in original state
echo "#!/bin/sh

### This file resides in Volumio image overlay filesystem
# It is run as root during Volumio OS image startup through Systemd service.
# As Volumio OS boots from aufs overlayed filesystem, one may modify this file
# but such changes will have not effect at next boot, as file is restored in original state

# dump early berryboot-init log file into system journal
cat ${BBMOUNT}${LOGFILE}
rm  ${BBMOUNT}${LOGFILE} > /dev/null 2>&1
" > "${DATADIR}"/.berryboot-integ

chmod 774 "${DATADIR}"/.berryboot-integ


########### Swap management ###########
# /berryboot/data/volumio_swapfile will be common to any Volumio2 image running under berryboot
#
# we add a feature: if /noswap file is present, then we disable swap at all

print_msg "Optimizing swap management"

# Patch original dynamicswap.service to ensure swap service is started after /berryboot mount
# we only add or change [UNIT] header of service
echo "[Unit]
Description = Berryboot-modded dynamicswap service
DefaultDependencies=false

Before=swap.target umount.target
Conflicts=umount.target
Wants=swap.target

After=berryboot-integ.service
ConditionPathExists=${BBMOUNT}/data
" > "${DATADIR}"/lib/systemd/system/dynamicswap.service
sed -n -e '/^\[Service\]/,$p' /squashfs/lib/systemd/system/dynamicswap.service >> "${DATADIR}"/lib/systemd/system/dynamicswap.service

# Enable Systemd service
ln -s /lib/systemd/system/dynamicswap.service "${DATADIR}"/etc/systemd/system/multi-user.target.wants/dynamicswap.service > /dev/null 2>&1


# Patch original /bin/dynswap.sh to relocate swap file and add noswap feature
mkdir -p "${DATADIR}"/bin
if [ -e "${DATADIR}"/noswap ]; then
  echo "#!/bin/sh" > "${DATADIR}"/bin/dynswap.sh
else
  sed 's/\/data\/swapfile/\/'"${BBMOUNT#"/"}"'\/data\/volumio_swapfile/g' /squashfs/bin/dynswap.sh > "${DATADIR}"/bin/dynswap.sh
fi
chmod 774 "${DATADIR}"/bin/dynswap.sh


############ Remove MrEngman-related drivers /etc/modprobe.d/xxx.conf ####################
# 8192cu.conf is in kernel so we keep
# we also keep blacklist-rtl8xxxu.conf blacklist-rtl8192cu.conf as drivers are still unmature
print_msg "Removing MrEngman drivers .conf"
mkdir -p "${DATADIR}"/etc/modprobe.d
touch "${DATADIR}"/etc/modprobe.d/.wh.8188eu.conf
touch "${DATADIR}"/etc/modprobe.d/.wh.8192eu.conf
touch "${DATADIR}"/etc/modprobe.d/.wh.8812au.conf


################ Add installVolumio2 script as bonus #########################

if [ ! -x "${DATADIR}"/home/volumio/installVolumio2 ]; then
  mkdir -p "${DATADIR}"/home/volumio
  chown 1000:1000 "${DATADIR}"/home/volumio
  if wget -O "${DATADIR}"/home/volumio/installVolumio2 "${INSTV2URL}" > /dev/null 2>&1; then
    chown 1000:1000 "${DATADIR}"/home/volumio/installVolumio2
    chmod 744 "${DATADIR}"/home/volumio/installVolumio2
    print_msg "Added installVolumio2 script in volumio home directory"
  fi
fi



#############################################################
###############         now some FUN  !!!!       ############
#############################################################

# hide /berryboot-init file in overlay
touch "${DATADIR}"/.wh.berryboot-init

cat /squashfs/etc/motd > "${DATADIR}"/etc/motd
cat << "EOF" >> "${DATADIR}"/etc/motd
                       
                       /\/\/\/\/\/\  
                      <            >
                       |          |
                       |          |
                       |   _  _   |
                      -|_ / \/ \_ |-
                     |I|  \_/\_/  |I|       Change is good.
                      -|   /  \   |-         You go first.
                       |   \__/   |
                       |          |
                       |          |
                       |__________|
                      /___/\__/\___\ 
                     /     | \|     \ 
                       /\  |\ | _@|#_
                      / /\ | \| |   |
                      \/  / \ / |   |
                       \_/___/   \_/ 


Reminder: we run under berryboot kernel now...

EOF

sync
cd "${ENTRYPATH}"
print_msg "Now we can finally boot Volumio2 image..., go!"
echo ""

# now we follow into the remaining of berryboot init...
